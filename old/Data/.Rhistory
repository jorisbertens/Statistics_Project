# Exercise 1
library(car)
install.packages("car")
# Exercise 1
library(car)
# Exercise 1
library(car)
install.packages("car")
# Exercise 1
library(car)
# Exercise 1
library(carData)
?Prestige
# To deal only with those two variables, let's creat a new df contaiing the variables income and education
str(Prestige)
newdata=Prestige[,c('education','income')]
newdata
# To explore the distribution of these variables we can draw a histogram or a boxplot
library(MASS)
truehist(newdata$income,main='Histogram of average income',ymax=1.5e-4)
#?truehist
lines(density(newdata$income))
abline(v=median(newdata$income),col="red")
abline(v=mean(newdata$income),col="blue")
truehist(newdata$education,main='Histogram of average income')
#?truehist
lines(density(newdata$education))
abline(v=median(newdata$education),col="red")
abline(v=mean(newdata$education),col="blue")
# Scatterplot
plot(newdata$education,newdata$income,xlab='Avg Edu',ylab='Avg Inc',main='Relationship between edu & inc')
# Non-linear relationship! Exponential!
# Lets ignore this for the moment and fit a straight line:
#Estimation
modl = lm(income~education,data=newdata)
# Checking and plotting results
summary(modl)
plot(modl)
return(df)
get_data<-function(data){
df = read.csv(data, header = TRUE)
return(df)
}
df <- get_data("Data/beds/urb_ctour_1_Data.csv")
df <- get_data("Data/beds/urb_ctour_1_Data.csv")
df = read.csv(data)
get_data<-function(data){
df = read.csv(data)
return(df)
}
df <- get_data("Data/beds/urb_ctour_1_Data.csv")
df = read.csv("Data/beds/urb_ctour_1_Data.csv")
df = read.csv("urb_ctour_1_Data.csv")
df = read.csv("urb_ctour_1_Data.csv")
df = read.csv("Data/beds/urb_ctour_1_Data.csv")
df = read.csv("/Data/beds/urb_ctour_1_Data.csv")
df = read.csv("urb_ctour_1_Data.csv")
df = read.csv("urb_ctour_1_Data.csv")
df = read.csv("/urb_ctour_1_Data.csv")
df = read.csv("Data/beds/urb_ctour_1_Data.csv")
df = read.csv("Data/beds/urb_ctour_1_Data.csv", header = TRUE)
df <- read.csv("Data/beds/urb_ctour_1_Data.csv", header = TRUE)
df <- read.csv("Data/beds/urb_ctour_1_Data.csv", header = TRUE)
df <- read.csv("Data/beds/urb_ctour_1_Data.csv", header = TRUE)
setwd("~/notebooks/2_Semester/Stastistics/Statistics_Project/Data")
df <- read.csv("beds/urb_ctour_1_Data.csv", header = TRUE)
head(df)
df
View(df)
View(df)
get_data<-function(data){
df <- read.csv(data, header = TRUE)
return(df)
}
get_data("beds/urb_ctour_1_Data.csv")
df_1 <- get_data("beds/urb_ctour_1_Data.csv")
View(df_1)
View(df_1)
View(df)
View(df)
df_new <- merge(df,df_1,by.x = c("TIME","CITIES"),by.y = c("TIME","CITIES"))
View(df_1)
View(df_new)
View(df_new)
View(df)
View(df_new)
join_data(df1,df2){
df_new <- merge(df1,df2,by.x = c("TIME","CITIES"),by.y = c("TIME","CITIES"))
return(df_new)
}
join_data(df1,df2){
df_new <- merge(df1,df2,by.x = c("TIME","CITIES"),by.y = c("TIME","CITIES"))
return(df_new)
}
join_data<-function(df1,df2){
df_new <- merge(df1,df2,by.x = c("TIME","CITIES"),by.y = c("TIME","CITIES"))
return(df_new)
}
View(df)
View(df)
# change columns names before the merge to stop any conflict from happening
names(df)[names(my_data) == "Value"] <- "Value1"
# change columns names before the merge to stop any conflict from happening
names(df)[names(df) == "Value"] <- "Value1"
View(df)
View(df)
# change columns names before the merge to stop any conflict from happening
change_col_name<-(data,old,new){
names(data)[names(data) == old] <- new
}
# change columns names before the merge to stop any conflict from happening
change_col_name<-(data,old,new){
names(data)[names(data) == old] <- new
}
# change columns names before the merge to stop any conflict from happening
change_col_name<-function(data,old,new){
names(data)[names(data) == old] <- new
}
